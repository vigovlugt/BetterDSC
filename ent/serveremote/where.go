// Code generated by entc, DO NOT EDIT.

package serveremote

import (
	"betterdsc/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ServerID applies equality check predicate on the "server_id" field. It's identical to ServerIDEQ.
func ServerID(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerID), v))
	})
}

// EmoteID applies equality check predicate on the "emote_id" field. It's identical to EmoteIDEQ.
func EmoteID(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmoteID), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// ImageType applies equality check predicate on the "image_type" field. It's identical to ImageTypeEQ.
func ImageType(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageType), v))
	})
}

// ServerIDEQ applies the EQ predicate on the "server_id" field.
func ServerIDEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldServerID), v))
	})
}

// ServerIDNEQ applies the NEQ predicate on the "server_id" field.
func ServerIDNEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldServerID), v))
	})
}

// ServerIDIn applies the In predicate on the "server_id" field.
func ServerIDIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldServerID), v...))
	})
}

// ServerIDNotIn applies the NotIn predicate on the "server_id" field.
func ServerIDNotIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldServerID), v...))
	})
}

// ServerIDGT applies the GT predicate on the "server_id" field.
func ServerIDGT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldServerID), v))
	})
}

// ServerIDGTE applies the GTE predicate on the "server_id" field.
func ServerIDGTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldServerID), v))
	})
}

// ServerIDLT applies the LT predicate on the "server_id" field.
func ServerIDLT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldServerID), v))
	})
}

// ServerIDLTE applies the LTE predicate on the "server_id" field.
func ServerIDLTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldServerID), v))
	})
}

// ServerIDContains applies the Contains predicate on the "server_id" field.
func ServerIDContains(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldServerID), v))
	})
}

// ServerIDHasPrefix applies the HasPrefix predicate on the "server_id" field.
func ServerIDHasPrefix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldServerID), v))
	})
}

// ServerIDHasSuffix applies the HasSuffix predicate on the "server_id" field.
func ServerIDHasSuffix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldServerID), v))
	})
}

// ServerIDEqualFold applies the EqualFold predicate on the "server_id" field.
func ServerIDEqualFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldServerID), v))
	})
}

// ServerIDContainsFold applies the ContainsFold predicate on the "server_id" field.
func ServerIDContainsFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldServerID), v))
	})
}

// EmoteIDEQ applies the EQ predicate on the "emote_id" field.
func EmoteIDEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmoteID), v))
	})
}

// EmoteIDNEQ applies the NEQ predicate on the "emote_id" field.
func EmoteIDNEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmoteID), v))
	})
}

// EmoteIDIn applies the In predicate on the "emote_id" field.
func EmoteIDIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmoteID), v...))
	})
}

// EmoteIDNotIn applies the NotIn predicate on the "emote_id" field.
func EmoteIDNotIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmoteID), v...))
	})
}

// EmoteIDGT applies the GT predicate on the "emote_id" field.
func EmoteIDGT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmoteID), v))
	})
}

// EmoteIDGTE applies the GTE predicate on the "emote_id" field.
func EmoteIDGTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmoteID), v))
	})
}

// EmoteIDLT applies the LT predicate on the "emote_id" field.
func EmoteIDLT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmoteID), v))
	})
}

// EmoteIDLTE applies the LTE predicate on the "emote_id" field.
func EmoteIDLTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmoteID), v))
	})
}

// EmoteIDContains applies the Contains predicate on the "emote_id" field.
func EmoteIDContains(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmoteID), v))
	})
}

// EmoteIDHasPrefix applies the HasPrefix predicate on the "emote_id" field.
func EmoteIDHasPrefix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmoteID), v))
	})
}

// EmoteIDHasSuffix applies the HasSuffix predicate on the "emote_id" field.
func EmoteIDHasSuffix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmoteID), v))
	})
}

// EmoteIDEqualFold applies the EqualFold predicate on the "emote_id" field.
func EmoteIDEqualFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmoteID), v))
	})
}

// EmoteIDContainsFold applies the ContainsFold predicate on the "emote_id" field.
func EmoteIDContainsFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmoteID), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// ImageTypeEQ applies the EQ predicate on the "image_type" field.
func ImageTypeEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageType), v))
	})
}

// ImageTypeNEQ applies the NEQ predicate on the "image_type" field.
func ImageTypeNEQ(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageType), v))
	})
}

// ImageTypeIn applies the In predicate on the "image_type" field.
func ImageTypeIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageType), v...))
	})
}

// ImageTypeNotIn applies the NotIn predicate on the "image_type" field.
func ImageTypeNotIn(vs ...string) predicate.ServerEmote {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ServerEmote(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageType), v...))
	})
}

// ImageTypeGT applies the GT predicate on the "image_type" field.
func ImageTypeGT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageType), v))
	})
}

// ImageTypeGTE applies the GTE predicate on the "image_type" field.
func ImageTypeGTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageType), v))
	})
}

// ImageTypeLT applies the LT predicate on the "image_type" field.
func ImageTypeLT(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageType), v))
	})
}

// ImageTypeLTE applies the LTE predicate on the "image_type" field.
func ImageTypeLTE(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageType), v))
	})
}

// ImageTypeContains applies the Contains predicate on the "image_type" field.
func ImageTypeContains(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageType), v))
	})
}

// ImageTypeHasPrefix applies the HasPrefix predicate on the "image_type" field.
func ImageTypeHasPrefix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageType), v))
	})
}

// ImageTypeHasSuffix applies the HasSuffix predicate on the "image_type" field.
func ImageTypeHasSuffix(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageType), v))
	})
}

// ImageTypeEqualFold applies the EqualFold predicate on the "image_type" field.
func ImageTypeEqualFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageType), v))
	})
}

// ImageTypeContainsFold applies the ContainsFold predicate on the "image_type" field.
func ImageTypeContainsFold(v string) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ServerEmote) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ServerEmote) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ServerEmote) predicate.ServerEmote {
	return predicate.ServerEmote(func(s *sql.Selector) {
		p(s.Not())
	})
}
