// Code generated by entc, DO NOT EDIT.

package ent

import (
	"betterdsc/ent/predicate"
	"betterdsc/ent/serveremote"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ServerEmoteUpdate is the builder for updating ServerEmote entities.
type ServerEmoteUpdate struct {
	config
	hooks    []Hook
	mutation *ServerEmoteMutation
}

// Where appends a list predicates to the ServerEmoteUpdate builder.
func (seu *ServerEmoteUpdate) Where(ps ...predicate.ServerEmote) *ServerEmoteUpdate {
	seu.mutation.Where(ps...)
	return seu
}

// SetServerID sets the "server_id" field.
func (seu *ServerEmoteUpdate) SetServerID(s string) *ServerEmoteUpdate {
	seu.mutation.SetServerID(s)
	return seu
}

// SetEmoteID sets the "emote_id" field.
func (seu *ServerEmoteUpdate) SetEmoteID(s string) *ServerEmoteUpdate {
	seu.mutation.SetEmoteID(s)
	return seu
}

// SetCode sets the "code" field.
func (seu *ServerEmoteUpdate) SetCode(s string) *ServerEmoteUpdate {
	seu.mutation.SetCode(s)
	return seu
}

// SetImageType sets the "image_type" field.
func (seu *ServerEmoteUpdate) SetImageType(s string) *ServerEmoteUpdate {
	seu.mutation.SetImageType(s)
	return seu
}

// Mutation returns the ServerEmoteMutation object of the builder.
func (seu *ServerEmoteUpdate) Mutation() *ServerEmoteMutation {
	return seu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (seu *ServerEmoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(seu.hooks) == 0 {
		affected, err = seu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerEmoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			seu.mutation = mutation
			affected, err = seu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(seu.hooks) - 1; i >= 0; i-- {
			if seu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = seu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, seu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (seu *ServerEmoteUpdate) SaveX(ctx context.Context) int {
	affected, err := seu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (seu *ServerEmoteUpdate) Exec(ctx context.Context) error {
	_, err := seu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seu *ServerEmoteUpdate) ExecX(ctx context.Context) {
	if err := seu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seu *ServerEmoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serveremote.Table,
			Columns: serveremote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: serveremote.FieldID,
			},
		},
	}
	if ps := seu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seu.mutation.ServerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldServerID,
		})
	}
	if value, ok := seu.mutation.EmoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldEmoteID,
		})
	}
	if value, ok := seu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldCode,
		})
	}
	if value, ok := seu.mutation.ImageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldImageType,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, seu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serveremote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ServerEmoteUpdateOne is the builder for updating a single ServerEmote entity.
type ServerEmoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ServerEmoteMutation
}

// SetServerID sets the "server_id" field.
func (seuo *ServerEmoteUpdateOne) SetServerID(s string) *ServerEmoteUpdateOne {
	seuo.mutation.SetServerID(s)
	return seuo
}

// SetEmoteID sets the "emote_id" field.
func (seuo *ServerEmoteUpdateOne) SetEmoteID(s string) *ServerEmoteUpdateOne {
	seuo.mutation.SetEmoteID(s)
	return seuo
}

// SetCode sets the "code" field.
func (seuo *ServerEmoteUpdateOne) SetCode(s string) *ServerEmoteUpdateOne {
	seuo.mutation.SetCode(s)
	return seuo
}

// SetImageType sets the "image_type" field.
func (seuo *ServerEmoteUpdateOne) SetImageType(s string) *ServerEmoteUpdateOne {
	seuo.mutation.SetImageType(s)
	return seuo
}

// Mutation returns the ServerEmoteMutation object of the builder.
func (seuo *ServerEmoteUpdateOne) Mutation() *ServerEmoteMutation {
	return seuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (seuo *ServerEmoteUpdateOne) Select(field string, fields ...string) *ServerEmoteUpdateOne {
	seuo.fields = append([]string{field}, fields...)
	return seuo
}

// Save executes the query and returns the updated ServerEmote entity.
func (seuo *ServerEmoteUpdateOne) Save(ctx context.Context) (*ServerEmote, error) {
	var (
		err  error
		node *ServerEmote
	)
	if len(seuo.hooks) == 0 {
		node, err = seuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ServerEmoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			seuo.mutation = mutation
			node, err = seuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(seuo.hooks) - 1; i >= 0; i-- {
			if seuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = seuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, seuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (seuo *ServerEmoteUpdateOne) SaveX(ctx context.Context) *ServerEmote {
	node, err := seuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (seuo *ServerEmoteUpdateOne) Exec(ctx context.Context) error {
	_, err := seuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (seuo *ServerEmoteUpdateOne) ExecX(ctx context.Context) {
	if err := seuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (seuo *ServerEmoteUpdateOne) sqlSave(ctx context.Context) (_node *ServerEmote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   serveremote.Table,
			Columns: serveremote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: serveremote.FieldID,
			},
		},
	}
	id, ok := seuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ServerEmote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := seuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, serveremote.FieldID)
		for _, f := range fields {
			if !serveremote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != serveremote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := seuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := seuo.mutation.ServerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldServerID,
		})
	}
	if value, ok := seuo.mutation.EmoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldEmoteID,
		})
	}
	if value, ok := seuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldCode,
		})
	}
	if value, ok := seuo.mutation.ImageType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: serveremote.FieldImageType,
		})
	}
	_node = &ServerEmote{config: seuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, seuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{serveremote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
