// Code generated by entc, DO NOT EDIT.

package ent

import (
	"betterdsc/ent/serveremote"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// ServerEmote is the model entity for the ServerEmote schema.
type ServerEmote struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ServerID holds the value of the "server_id" field.
	ServerID string `json:"server_id,omitempty"`
	// EmoteID holds the value of the "emote_id" field.
	EmoteID string `json:"emote_id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// ImageType holds the value of the "image_type" field.
	ImageType string `json:"image_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ServerEmote) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case serveremote.FieldID:
			values[i] = new(sql.NullInt64)
		case serveremote.FieldServerID, serveremote.FieldEmoteID, serveremote.FieldCode, serveremote.FieldImageType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ServerEmote", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ServerEmote fields.
func (se *ServerEmote) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case serveremote.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			se.ID = int(value.Int64)
		case serveremote.FieldServerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field server_id", values[i])
			} else if value.Valid {
				se.ServerID = value.String
			}
		case serveremote.FieldEmoteID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field emote_id", values[i])
			} else if value.Valid {
				se.EmoteID = value.String
			}
		case serveremote.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				se.Code = value.String
			}
		case serveremote.FieldImageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_type", values[i])
			} else if value.Valid {
				se.ImageType = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ServerEmote.
// Note that you need to call ServerEmote.Unwrap() before calling this method if this ServerEmote
// was returned from a transaction, and the transaction was committed or rolled back.
func (se *ServerEmote) Update() *ServerEmoteUpdateOne {
	return (&ServerEmoteClient{config: se.config}).UpdateOne(se)
}

// Unwrap unwraps the ServerEmote entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (se *ServerEmote) Unwrap() *ServerEmote {
	tx, ok := se.config.driver.(*txDriver)
	if !ok {
		panic("ent: ServerEmote is not a transactional entity")
	}
	se.config.driver = tx.drv
	return se
}

// String implements the fmt.Stringer.
func (se *ServerEmote) String() string {
	var builder strings.Builder
	builder.WriteString("ServerEmote(")
	builder.WriteString(fmt.Sprintf("id=%v", se.ID))
	builder.WriteString(", server_id=")
	builder.WriteString(se.ServerID)
	builder.WriteString(", emote_id=")
	builder.WriteString(se.EmoteID)
	builder.WriteString(", code=")
	builder.WriteString(se.Code)
	builder.WriteString(", image_type=")
	builder.WriteString(se.ImageType)
	builder.WriteByte(')')
	return builder.String()
}

// ServerEmotes is a parsable slice of ServerEmote.
type ServerEmotes []*ServerEmote

func (se ServerEmotes) config(cfg config) {
	for _i := range se {
		se[_i].config = cfg
	}
}
